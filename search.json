[{"title":"DPReporter项目部署","path":"/998c9e38a56f/","content":"该文档用于在内网环境下如何如何进行DPReporter大数据分析项目部署 系统及中间件 操作系统 CPU架构 Docker Docker-Compose openEuler 22.03 (LTS-SP2) X86_64 V20.10.24 V2.23.0 openEuler 22.03 (LTS-SP2) ARM V20.10.24 V2.23.0 远程连接工具 工具名称 版本 用途 Xshell 7.x ssh工具 Xftp 7.x 文件上传 Docker离线安装下载地址x86_64：https://mirrors.huaweicloud.com/docker-ce/linux/static/stable/x86_64&#x2F; arm64：https://mirrors.huaweicloud.com/docker-ce/linux/static/stable/aarch64/ 123wget https://mirrors.huaweicloud.com/docker-ce/linux/static/stable/x86_64/docker-20.10.24.tgztar zxvf docker-20.10.24.tgz cp docker/* /usr/bin/ 配置Docker服务vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service 1234567891011121314151617181920[Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network-online.target firewalld.service Wants=network-online.target [Service] Type=notify ExecStart=/usr/bin/dockerd --selinux-enabled=false --insecure-registry=127.0.0.1 ExecReload=/bin/kill -s HUP $MAINPID LimitNOFILE=65535 LimitNPROC=65535 LimitCORE=65535 TimeoutStartSec=0 Delegate=yes KillMode=process Restart=on-failure StartLimitBurst=3 StartLimitInterval=60s [Install] WantedBy=multi-user.target 设置Docker自启动12345678# 设置为可执行权限chmod +x /etc/systemd/system/docker.servicesystemctl daemon-reloadsystemctl start docker# 设置开机自启systemctl enable dockerdocker --version# 输出Docker version 20.10.24, build 297e128 Docker-Compose离线安装下载地址x86_64：https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 arm64：https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-aarch64 配置Docker-Componse123456789# 修改名称mv docker-compose-linux-x86_64 docker-compose# 设置为可执行权限chmod +x docker-compose# 移动到bin目录mv docker-compose /usr/local/bin/# 执行docker-compose -vdocker-compose -v# 输出Docker Compose version v2.23.0 项目部署 为快速进行项目配置特编写本片文章内容，目的是方便实施人员快速部署，减少出错几率降低成本。请严格参照如下步骤进行项目部署。 项目端口说明 服务名称 用途 外部端口 内部端口 redis6 redis 16379 6379 postgres 数据库 15432 5432 dpreporter 后端服务 18082&#x2F;27700 8082&#x2F;27700 dpreporter-vue 前端服务 18085 8085 kkfileview 文件预览 18012 8012 powerjob-server 定时任务 10010&#x2F;10086&#x2F;7700 10010&#x2F;10086&#x2F;7700 grid 报表服务 18082 8082 一、文件目录结构1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162docker-file:│ docker-compose.yml ---docker-compose文件└─images ---镜像文件存放目录 ├─package dpreporter.tar ---项目后端镜像 dpreporter-vue.tar ---项目前端镜像 kkfileview.tar ---文件预览镜像 nginx.tar ---nginx镜像 openjdk.tar ---openjdk镜像 pg.tar ---postgresql数据库镜像 powerjob-server.tar ---定时任务镜像 redis.tar ---redis镜像 grid-service.tar ---报表镜像│└─services ├─db │ └─data ---数据库存放路径【风险性极高删除数据库丢失】 ├─dpreporter │ ├─config ---主应用前后端配置文件 │ │ application.yml │ │ application-prod.yml │ │ nginx.conf │ ├─document │ │ └─temp │ │ │ ├─license ---授权目录 │ │ publicCerts.keystore │ ├─gridServiceFile ---报表文件存放路径 │ ├─redis ---reids配置及存储 │ │ │ Dockerfile │ │ │ redis.conf │ │ │ │ │ └─data │ │ dump.rdb ---redis持久化存储文件 │ │ │ └─zzlogs ---项目日志存放路径 │ │ │ └─webadmin │ application-webadmin.log │ powerjob-worker.log ├─grid ---报表服务端 │ ├─config │ │ application.yml │ └─server │ ├─file │ └─temp │ ├─kkfileview ---文件预览服务配置 │ └─config │ application.properties │ ├─powerjob-server ---定时任务配置、日志、及数据库文件 │ ├─config │ │ application.properties │ │ application-product.properties │ │ │ └─data │ ├─h2 │ │ │ ├─logs │ │ │ └─online_log 二、项目部署 上传文件到任意目录 解压文件并进入文件目录 12unzip docker-files.zipcd docker-files 启动项目 1docker-compose up -d 查看启动情况 1docker-compose ps 成功后有如下镜像 dpreporter、dpreporter-vue、kkfileview、postgres、powerjob-server、redis6、grid 访问项目 项目地址：http://ip:18085 出现如下页面","tags":["预算执行分析","docker","DPReporter"],"categories":["预算执行分析","docker"]},{"title":"多数据源文档","path":"/3f6462eb5d93/","content":"1. 概述在现代企业级应用开发中，多数据源技术的应用日益广泛。本指南旨在详细阐述陕西鑫众为软件有限公司多数据源组件如何在项目中集成与使用多数据源，包括配置及编程实践等内容。 2. 准备工作在正式启用多数据源功能前，需完成以下准备工作： 2.1 配置数据源于项目的 resources 目录下建立 application.yml 文件，用于定义数据源的相关参数。示例如下： 12345678910111213141516spring: datasource: dynamic: master: jdbc-url: jdbc:postgresql://[服务器地址]:[端口]/[数据库名] username: [ 用户名 ] password: [ 密码 ] driver-class-name: [ 驱动类名 ] pool-name: [ 连接池名 ] minimum-idle: 5 idle-timeout: 180000 maximum-pool-size: 10 auto-commit: true max-lifetime: 1800000 connection-timeout: 30000 connection-test-query: SELECT 1 请根据您的实际需求调整上述配置项。 2.2 添加依赖编辑 pom.xml 文件，加入对多数据源支持的依赖包： 12345&lt;dependency&gt; &lt;groupId&gt;com.zhongway&lt;/groupId&gt; &lt;artifactId&gt;boot-starter-datasource&lt;/artifactId&gt;&lt;/dependency&gt; 3. 实现多数据源本节将介绍三种常见的多数据源使用方法：手动切换、Lambda 表达式简化及注解方式。 3.1 手动切换数据源利用 DataSourceContextHolder 类来动态改变当前使用的数据源。示例代码如下： 12345678910111213141516public &lt;T&gt; List&lt;T&gt; fetchAllDataFromMultipleSources() &#123; try &#123; // 切换至 PostgreSQL 数据源 DataSourceContextHolder.setDataSourceType(&quot;pg&quot;); List&lt;T&gt; pgData = baseMapper.selectList(new QueryWrapper&lt;&gt;()); // 切换至 MySQL 数据源 DataSourceContextHolder.setDataSourceType(&quot;ms&quot;); List&lt;T&gt; msData = baseMapper.selectList(new QueryWrapper&lt;&gt;()); return Stream.concat(pgData.stream(), msData.stream()).collect(Collectors.toList()); &#125; finally &#123; // 重置数据源 DataSourceContextHolder.clearDataSourceType(); &#125;&#125; 设置数据源：调用 setDataSourceType(String) 方法指定数据源。 执行查询：通过 MyBatis 或 JPA 等 ORM 框架执行数据访问操作。 恢复默认状态：使用 clearDataSourceType() 方法清除当前数据源标识，确保不会影响后续操作。 3.2 Lambda 表达式简化采用 DataSourceUtils 类中的 executeDataSource 方法，可借助 Lambda 表达式简化数据源切换流程： 123456789public &lt;T&gt; List&lt;T&gt; fetchAllDataUsingLambda() &#123; List&lt;T&gt; pgData = DataSourceUtils.executeDataSource(&quot;pg&quot;, () -&gt; baseMapper.selectList( new QueryWrapper&lt;&gt;())); List&lt;T&gt; msData = DataSourceUtils.executeDataSource(&quot;ms&quot;, () -&gt; baseMapper.selectList( new QueryWrapper&lt;&gt;())); return Stream.concat(pgData.stream(), msData.stream()).collect(Collectors.toList());&#125; 此方法允许开发者在不显式管理数据源上下文的情况下，安全地执行跨数据源的操作。 3.3 注解方式通过在方法或接口添加 @DS 注解，可以轻松指定目标数据源。例如： 123456789101112131415public interface DataService&lt;T&gt; &#123; @DS(&quot;pg&quot;) List&lt;T&gt; fetchFromPostgreSQL(); @DS(&quot;ms&quot;) List&lt;T&gt; fetchFromMySQL();&#125;public &lt;T&gt; List&lt;T&gt; fetchAllDataUsingAnnotations() &#123; List&lt;T&gt; pgData = dataService.fetchFromPostgreSQL(); List&lt;T&gt; msData = dataService.fetchFromMySQL(); return Stream.concat(pgData.stream(), msData.stream()).collect(Collectors.toList());&#125; 这种方式使得代码更加简洁明了，同时提高了可维护性。 以上是关于多数据源使用的基本介绍与实践指导。每种方式都各有利弊，请大家根据具体业务需求使用。希望这些内容能帮助您更好地理解和运用多数据源技术，从而构建出更加强大且灵活的应用程序。 鑫众为®多数据源组件【V1.0.0】","tags":["dynamic-datasource","datasource"],"categories":["datasource"]},{"title":"关于","path":"/about/index.html","content":"昵称简介 关于本站 本站没有任何推广和打赏链接，如果您觉得哪个作品不错，欢迎去对应的仓库点个赞，或者在对应的文章下面留言互动一下。 开源项目无任何盈利目的，只在工作闲暇时间进行维护，有相关需求请前往对应项目提 Issue 进行反馈，通过私人邮件询问开源项目问题可能得不到答复。"},{"title":"收藏","path":"/bookmark/index.html","content":"…"},{"title":"探索","path":"/explore/index.html","content":"…"},{"title":"Page","path":"/page/index.html","content":"This is a page test."}]